<ExposedApi DateCreated="2/11/2022" Model_Name="Customer" Model_Description="" Version="0.1.0" Comments="">
  <Operations>
    <Operation Verb="Post" Path="Create" ReturnDataType="void" Name="Create" Description="Creates a new Customer" AllowAnonymousUsers="False" AllowAllAuthenticated="True" EnableAccessLog="False" ResponseSample="" RequestSample="" ReadOnly="false" AllowPermisssions="" ApplicationTags="">
      <Parameters>
        <Parameter DataType="Domain.Customer" Required="True" Name="newCustomer" Description="" />
      </Parameters>
      <Code>function void Create(Domain.Customer newCustomer) {
    newCustomer.Id = 0;
    newCustomer.Save();
}</Code>
      <CachingOptions CachePerUser="false" OperationIsCached="false" OverrideDefaultCachingSettings="false" UseCustomExpirationMethod="false" HeadersToInlcudeInCacheKey="" ExpirationDays="0" ExpirationHours="0" ExpirationMinutes="3" ExpirationSeconds="0" ExpirationMilliseconds="0" CacheMode="None">function TimeSpan Expiration(
	Domain.Customer newCustomer
)
{ 
	 return CommonLib.Utilities.CreateTimeSpan(0, 1, 0); 
}</CachingOptions>
    </Operation>
    <Operation Verb="Get" Path="" ReturnDataType="Domain.Customer" Name="Get" Description="Get an Customer insance based on Id" AllowAnonymousUsers="False" AllowAllAuthenticated="True" EnableAccessLog="False" ResponseSample="" RequestSample="" ReadOnly="false" AllowPermisssions="" ApplicationTags="">
      <Parameters>
        <Parameter DataType="int" Required="True" Name="Id" Description="" />
      </Parameters>
      <Code>function Domain.Customer Get(int Id) {
    return Domain.Customer.GetByKey(Id);
}</Code>
      <CachingOptions CachePerUser="false" OperationIsCached="false" OverrideDefaultCachingSettings="false" UseCustomExpirationMethod="false" HeadersToInlcudeInCacheKey="" ExpirationDays="0" ExpirationHours="0" ExpirationMinutes="3" ExpirationSeconds="0" ExpirationMilliseconds="0" CacheMode="None">function TimeSpan Expiration(
	int Id,
	Domain.Customer response
)
{ 
	 return CommonLib.Utilities.CreateTimeSpan(0, 1, 0); 
}</CachingOptions>
    </Operation>
    <Operation Verb="Get" Path="count" ReturnDataType="int" Name="Count" Description="Count all Customers" AllowAnonymousUsers="False" AllowAllAuthenticated="True" EnableAccessLog="False" ResponseSample="" RequestSample="" ReadOnly="false" AllowPermisssions="" ApplicationTags="">
      <Parameters />
      <Code>function int Count() {
    return Domain.Customer.GetAll().Length;
}</Code>
      <CachingOptions CachePerUser="false" OperationIsCached="false" OverrideDefaultCachingSettings="false" UseCustomExpirationMethod="false" HeadersToInlcudeInCacheKey="" ExpirationDays="0" ExpirationHours="0" ExpirationMinutes="3" ExpirationSeconds="0" ExpirationMilliseconds="0" CacheMode="None">function TimeSpan Expiration(
	int response
)
{ 
	 return CommonLib.Utilities.CreateTimeSpan(0, 1, 0); 
}</CachingOptions>
    </Operation>
    <Operation Verb="Get" Path="all" ReturnDataType="Collection[Domain.Customer]" Name="GetAll" Description="Gets all Customers. Max pageSize is 50" AllowAnonymousUsers="False" AllowAllAuthenticated="True" EnableAccessLog="False" ResponseSample="" RequestSample="" ReadOnly="false" AllowPermisssions="" ApplicationTags="">
      <Parameters>
        <Parameter DataType="int" Required="True" Name="pageSize" Description="" />
        <Parameter DataType="int" Required="True" Name="pageIndex" Description="" />
      </Parameters>
      <Code>function Collection[Domain.Customer] GetAll(int pageSize, int pageIndex) {
    if (pageSize &gt; 50) {
        pageSize = 50;
    }
    
    return Domain.Customer.GetAll(pageIndex * pageSize, pageSize);
}</Code>
      <CachingOptions CachePerUser="false" OperationIsCached="false" OverrideDefaultCachingSettings="false" UseCustomExpirationMethod="false" HeadersToInlcudeInCacheKey="" ExpirationDays="0" ExpirationHours="0" ExpirationMinutes="3" ExpirationSeconds="0" ExpirationMilliseconds="0" CacheMode="None">function TimeSpan Expiration(
	int pageSize,
	int pageIndex,
	Collection[Domain.Customer] response
)
{ 
	 return CommonLib.Utilities.CreateTimeSpan(0, 1, 0); 
}</CachingOptions>
    </Operation>
    <Operation Verb="Post" Path="" ReturnDataType="void" Name="Save" Description="Saves a Customer insance" AllowAnonymousUsers="False" AllowAllAuthenticated="True" EnableAccessLog="False" ResponseSample="" RequestSample="" ReadOnly="false" AllowPermisssions="" ApplicationTags="">
      <Parameters>
        <Parameter DataType="Domain.Customer" Required="True" Name="Customer" Description="" />
      </Parameters>
      <Code>function void Save(Domain.Customer Customer) {
    Customer.Save();
}</Code>
      <CachingOptions CachePerUser="false" OperationIsCached="false" OverrideDefaultCachingSettings="false" UseCustomExpirationMethod="false" HeadersToInlcudeInCacheKey="" ExpirationDays="0" ExpirationHours="0" ExpirationMinutes="3" ExpirationSeconds="0" ExpirationMilliseconds="0" CacheMode="None">function TimeSpan Expiration(
	Domain.Customer Customer
)
{ 
	 return CommonLib.Utilities.CreateTimeSpan(0, 1, 0); 
}</CachingOptions>
    </Operation>
    <Operation Verb="Delete" Path="" ReturnDataType="void" Name="Delete" Description="Deletes a Customer insance based on Id" AllowAnonymousUsers="False" AllowAllAuthenticated="True" EnableAccessLog="False" ResponseSample="" RequestSample="" ReadOnly="false" AllowPermisssions="" ApplicationTags="">
      <Parameters>
        <Parameter DataType="int" Required="True" Name="Id" Description="" />
      </Parameters>
      <Code>function void Delete(int Id) {
    Domain.Customer.GetByKey(Id).Delete();
}</Code>
      <CachingOptions CachePerUser="false" OperationIsCached="false" OverrideDefaultCachingSettings="false" UseCustomExpirationMethod="false" HeadersToInlcudeInCacheKey="" ExpirationDays="0" ExpirationHours="0" ExpirationMinutes="3" ExpirationSeconds="0" ExpirationMilliseconds="0" CacheMode="None">function TimeSpan Expiration(
	int Id
)
{ 
	 return CommonLib.Utilities.CreateTimeSpan(0, 1, 0); 
}</CachingOptions>
    </Operation>
  </Operations>
  <DataContracts>
    <DataContract Name="" Class="Domain.Customer" BaseClass="">
      <Members>
        <Member Name="Id" DataType="int" Checked="False" />
        <Member Name="Name" DataType="string" Checked="True" />
        <Member Name="Surname" DataType="string" Checked="True" />
        <Member Name="RegistrationDate" DataType="DateTime" Checked="True" />
        <Member Name="MainAddress" DataType="Domain.Address" Checked="False" />
        <Member Name="Orders" DataType="Collection[Domain.Order]" Checked="False" />
      </Members>
    </DataContract>
  </DataContracts>
</ExposedApi>